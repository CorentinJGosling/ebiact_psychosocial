interv <- c("EIBI", "NDBI", "DEV", "PMI", "SSG", "TEACCH", "CBT", "TECH")
mainsympt <- c("Overall ASD symptoms", "Social communication",
"Repetitive behaviors", "Adaptive behaviors", "Cognition(IQ)",
"Language(Exp)", "Language(Recep)", "Disruptive behaviors")
ASDsympt <- c("Overall ASD symptoms", "Social communication", "Repetitive behaviors")
othersympt <- c("Adaptive behaviors", "Cognition(IQ)", "Cognition(nonverbal IQ)",
"Language", "Language(Exp)", "Language(Recep)", "Disruptive behaviors")
mainsympt_long <- c("Overall ASD symptoms", "Social communication",
"Restricted repetitive behaviors", "Adaptive behaviors", "Cognition(IQ)",
"Language(Expressive)", "Language(Receptive)",  "Disruptive behaviors")
df_raw <- readRDS("C:/Users/Corentin Gosling/drive_gmail/Recherche/Article 2 - Base de Données/1 - Extraction Psychosocial/4 - Data analysis/supplementary/df.rds")
df_amstar <- readRDS("C:/Users/Corentin Gosling/drive_gmail/Recherche/Article 2 - Base de Données/1 - Extraction Psychosocial/4 - Data analysis/supplementary/df_amstar.rds")
if (all(df_raw$Outcome_general %in% c(ASDsympt, othersympt))) { stop()}
# identify multiple comparisons group as a unique group
df_raw$year <- gsub("b", "", df_raw$year)
df_raw$author_year <- with(df_raw, paste0(df_raw$author, " (", df_raw$year, ")"))
# calculate the sample size of studies with multiple groups (sum) or outcomes (max)
df_N_CCT <- data.table::setDT(df_raw)[, .(x = sum(N_tot)), by =.(First_author_meta, Year_meta, Intervention_general, Intervention_precise, author, year, Outcome_general, multiple_es, id_row)][, .(N_cor = max(x)), by=.(First_author_meta, Year_meta, Intervention_general, Intervention_precise, author, year, Outcome_general)]
# reinsert corrected sample size in the initial dataset
df1 <- dplyr::left_join(df_raw, df_N_CCT, by = c("First_author_meta", "Year_meta", "Intervention_general", "Intervention_precise", "author", "year", "Outcome_general"))
# aggregate dataset at the outcome level
df_agg_outcome <- df1[, lapply(.SD, function(x) weighted.mean(x, N_cor, na.rm = TRUE)),
by = c("First_author_meta", "Year_meta", "Intervention_general", "Intervention_precise", "author", "year", "Outcome_general"),
.SDcols = c(# participants
"MeanAge", "MeanIQ", "PercMale",
# intervention - length
"LengthWeek", "DurationMonth",
# intervention -implementer
"parent_imp", "prof_imp",
# intervention -setting
"sett_home", "sett_clin", "sett_class",
# RoB
"Design_num", "RoB_BlindOut_num", "low_RoB_num",
# outcome
"Outcome_test", "Outcome_questionnaire", "Outcome_observation",
"Active_controls")]
df2 <- dplyr::left_join(data.frame(df_agg_outcome), data.frame(df_N_CCT))
# aggregate dataset at the meta-analysis level
df_agg_meta <- data.table::setDT(df2)[, lapply(.SD, function(x)  weighted.mean(x, N_cor, na.rm = TRUE)),
by = c("First_author_meta", "Year_meta", "Intervention_general", "Intervention_precise",
"Outcome_general"),
.SDcols =  c(# participants
"MeanAge", "MeanIQ", "PercMale",
# intervention - length
"LengthWeek", "DurationMonth",
# intervention -implementer
"parent_imp", "prof_imp",
# intervention -setting
"sett_home", "sett_clin", "sett_class",
# RoB
"Design_num", "RoB_BlindOut_num", "low_RoB_num",
# outcome
"Outcome_test", "Outcome_questionnaire", "Outcome_observation",
"Active_controls")]
# create some new variables to facilitate data presentation
df_agg_meta$factor <- with(df_agg_meta, paste0(First_author_meta, "_", Year_meta, "_", Intervention_precise, "_", Outcome_general))
df_agg_meta$Paper <- with(df_agg_meta, paste0(First_author_meta, " (", Year_meta, ")"))
df_agg_meta$LengthWeek_round <- round(df_agg_meta$LengthWeek)
df_agg_meta$Intensity <- with(df_agg_meta,
ifelse(LengthWeek < 2, "< 2 h/wk",
ifelse(LengthWeek < 5, "2-4 h/wk",
ifelse(LengthWeek < 10, "5-9 h/wk",
ifelse(LengthWeek < 20, "10-19 h/wk",
ifelse(LengthWeek >= 20, ">= 20h/wk", NA_real_))))))
df_agg_meta$Age <- with(df_agg_meta,
ifelse(MeanAge < 6, "< 6 yo",
ifelse(MeanAge < 13, "6-12 yo",
ifelse(MeanAge < 20, "13-19 yo",
ifelse(MeanAge >= 20, ">= 20 yo", NA_real_)))))
df_agg_meta$IQ <- with(df_agg_meta,
ifelse(MeanIQ < 70, "Low (< 70)",
ifelse(MeanIQ < 80, "Limit (70-79)",
ifelse(MeanIQ < 120, "Average (80-119)",
ifelse(MeanIQ < 130, "High (120-129)",
ifelse(MeanIQ >= 130, "Very high (130+)",
NA_real_))))))
df_agg_meta$Duration <- with(df_agg_meta,
ifelse(DurationMonth < 2, "< 2 months",
ifelse(DurationMonth <= 6, "2-6 months",
ifelse(DurationMonth <= 12, "7-12 months",
ifelse(DurationMonth > 12, "> 12 months",
NA_real_)))))
df_agg_meta <- dplyr::left_join(df_agg_meta, df_amstar)
# identify mixed age groups in meta-analyses
mixed_df = data.frame(factor = rep(NA, length(unique(df_raw$factor))), min_age = rep(NA, length(unique(df_raw$factor))), max_age = rep(NA, length(unique(df_raw$factor))), diff = rep(NA, length(unique(df_raw$factor))))
row = 1
for (fact in unique(df_raw$factor)) {
x_i = df_raw[df_raw$factor == fact, ]
mixed_df$factor[row] = fact
mixed_df$min_age[row] = min(x_i$MeanAge, na.rm = TRUE)
mixed_df$max_age[row] = max(x_i$MeanAge, na.rm = TRUE)
mixed_df$diff[row] = max(x_i$MeanAge, na.rm = TRUE) - min(x_i$MeanAge, na.rm = TRUE)
row = row + 1
}
df_agg_meta <- dplyr::left_join(df_agg_meta, mixed_df)
df_agg_meta$Age_bounds = paste0("[", round(df_agg_meta$min_age, 1), " - ", round(df_agg_meta$max_age, 1), "]")
inter_ok = c("EIBI", "DEV", "NDBI", "SSG", "TECH", "PMI", "TEACCH", "CBT")
outcome_ok = c("Overall ASD symptoms", "Social communication",
"Restricted repetitive behaviors", "Adaptive behaviors", "Cognition(IQ)",
"Language(Expressive)", "Language(Receptive)", "Disruptive behaviors")
df_agg_meta$IN_meta = 0
df_agg_meta$Year_meta_num = as.numeric(gsub("a|b", "", df_agg_meta$Year_meta))
df_agg_meta$unique_meta = paste0(df_agg_meta$Intervention_precise, "_", df_agg_meta$Outcome_general)
df_agg_meta$row_id_meta = 1:nrow(df_agg_meta)
for (uniq in unique(df_agg_meta$unique_meta)) {
df_uniq = df_agg_meta[df_agg_meta$unique_meta == uniq ,]
if (unique(df_uniq$Intervention_precise) %in% inter_ok) {
if(nrow(df_uniq) > 0) {
for (age in unique(df_uniq$Age)) {
# subset for a given age group
df_uniq_age = df_uniq[df_uniq$Age == age, ]
# select most recent
if (any(df_uniq_age$Year_meta_num >= 2016) & any(df_uniq_age$Year_meta_num < 2016)) {
df_uniq_age = df_uniq_age[df_uniq_age$Year_meta >= 2016, ]
}
# select highest amstar score
row_meta = df_uniq_age[which(df_uniq_age$amstar == max(df_uniq_age$amstar)), ]$row_id_meta
if (length(unique(df_agg_meta[df_agg_meta$row_id_meta %in% row_meta, ]$factor)) > 1) {
df_agg_meta[df_agg_meta$row_id_meta %in% row_meta &
df_agg_meta$Year_meta_num == max(df_agg_meta$Year_meta_num), ]$IN_meta = 1
print(paste("issues with ", unique(df_agg_meta[df_agg_meta$row_id_meta %in% row_meta, ]$factor)))
} else {
df_agg_meta[df_agg_meta$row_id_meta %in% row_meta, ]$IN_meta = 1
}
}
}
}
}
# exclude additional outcomes from main meta analyses
df_agg_meta$IN_meta = ifelse(!(df_agg_meta$Outcome_general %in% outcome_ok), 0, df_agg_meta$IN_meta)
IN_factor = df_agg_meta[which(df_agg_meta$IN_meta == 1), ]$factor
df_raw$Year_meta_num = as.numeric(gsub("a|b", "", df_raw$Year_meta))
df_raw$IN_trial = 0
for (aut in unique(df_raw$author_year)) {
df_uniq = df_raw[df_raw$author_year == aut, ]
for (out in unique(df_uniq$Outcome_general)) {
df_uniq_out = df_uniq[which(df_uniq$Outcome_general == out), ]
if (length(unique(df_uniq_out$factor)) > 1) {
row_trial = df_uniq_out[which(df_uniq_out$amstar == max(df_uniq_out$amstar)), ]$row_id
if (length(unique(with(df_uniq_out[df_uniq_out$row_id %in% row_trial, ],
paste(First_author_meta, Year_meta)))) > 1) {
df_raw[which(df_raw$row_id %in% row_trial &
df_raw$Year_meta == max(df_uniq_out$Year_meta_num)), ]$IN_trial = 1
} else {
df_raw[df_raw$row_id %in% row_trial, ]$IN_trial = 1
}
} else {
df_raw[which(df_raw$row_id %in% df_uniq_out$row_id), ]$IN_trial = 1
}
}
}
df_raw$included_trial = df_raw$IN_trial
# subset dataframe to RCTs with low risk of bias regarding blinding of outcome assessors
df_raw_S1 <- subset(df_raw, rob == "low")
# calculate the sample size of studies with multiple groups (sum) or outcomes (max)
df_N_CCT_S1 <- data.table::setDT(df_raw_S1)[, .(x = sum(N_tot)), by =.(First_author_meta, Year_meta, Intervention_general, Intervention_precise, author, year, Outcome_general, multiple_es, id_row)][, .(N_cor = max(x)), by=.(First_author_meta, Year_meta, Intervention_general, Intervention_precise, author, year, Outcome_general)]
# reinsert corrected sample size in the initial dataset
df1_S1 <- dplyr::left_join(df_raw_S1, df_N_CCT_S1,
by = c("First_author_meta", "Year_meta", "Intervention_general",
"Intervention_precise",
"author", "year", "Outcome_general"))
# aggregate dataset at the outcome level
df_agg_outcome_S1 <- df1_S1[, lapply(.SD, function(x) weighted.mean(x, N_cor, na.rm = TRUE)),
by = c("First_author_meta", "Year_meta", "Intervention_general", "Intervention_precise",
"author", "year", "Outcome_general"),
.SDcols = c(# participants
"MeanAge", "MeanIQ", "PercMale",
# intervention - length
"LengthWeek", "DurationMonth",
# intervention -implementer
"parent_imp", "prof_imp",
# intervention -setting
"sett_home", "sett_clin", "sett_class",
# RoB
"Design_num", "RoB_BlindOut_num", "low_RoB_num",
# outcome
"Outcome_test", "Outcome_questionnaire", "Outcome_observation",
"Active_controls")]
df2_S1 <- dplyr::left_join(data.frame(df_agg_outcome_S1), data.frame(df_N_CCT_S1))
# aggregate dataset at the meta-analysis level
df_agg_meta_S1 <- data.table::setDT(df2_S1)[, lapply(.SD, function(x)  weighted.mean(x, N_cor, na.rm = TRUE)),
by = c("First_author_meta", "Year_meta", "Intervention_general", "Intervention_precise",
"Outcome_general"),
.SDcols =  c(# participants
"MeanAge", "MeanIQ", "PercMale",
# intervention - length
"LengthWeek", "DurationMonth",
# intervention -implementer
"parent_imp", "prof_imp",
# intervention -setting
"sett_home", "sett_clin", "sett_class",
# RoB
"Design_num", "RoB_BlindOut_num", "low_RoB_num",
# outcome
"Outcome_test", "Outcome_questionnaire", "Outcome_observation",
"Active_controls")]
# create some new variables to facilitate data presentation
df_agg_meta_S1$factor <- with(df_agg_meta_S1, paste0(First_author_meta, "_", Year_meta, "_", Intervention_precise, "_", Outcome_general))
df_agg_meta_S1$Paper <- with(df_agg_meta_S1, paste0(First_author_meta, " (", Year_meta, ")"))
df_agg_meta_S1$LengthWeek_round <- round(df_agg_meta_S1$LengthWeek)
df_agg_meta_S1$Intensity <- with(df_agg_meta_S1,
ifelse(LengthWeek < 2, "< 2 h/wk",
ifelse(LengthWeek < 5, "2-4 h/wk",
ifelse(LengthWeek < 10, "5-9 h/wk",
ifelse(LengthWeek < 20, "10-19 h/wk",
ifelse(LengthWeek >= 20, ">= 20h/wk", NA_real_))))))
df_agg_meta_S1$Age <- with(df_agg_meta_S1,
ifelse(MeanAge < 6, "< 6 yo",
ifelse(MeanAge < 13, "6-12 yo",
ifelse(MeanAge < 20, "13-19 yo",
ifelse(MeanAge >= 20, ">= 20 yo", NA_real_)))))
df_agg_meta_S1$IQ <- with(df_agg_meta_S1,
ifelse(MeanIQ < 70, "Low (< 70)",
ifelse(MeanIQ < 80, "Limit (70-79)",
ifelse(MeanIQ < 120, "Average (80-119)",
ifelse(MeanIQ < 130, "High (120-129)",
ifelse(MeanIQ >= 130, "Very high (130+)",
NA_real_))))))
df_agg_meta_S1$Duration <- with(df_agg_meta_S1,
ifelse(DurationMonth < 2, "< 2 months",
ifelse(DurationMonth <= 6, "2-6 months",
ifelse(DurationMonth <= 12, "7-12 months",
ifelse(DurationMonth > 12, "> 12 months",
NA_real_)))))
# identify mixed age groups in meta-analyses
mixed_df_S1 = data.frame(factor = rep(NA, length(unique(df_raw_S1$factor))), min_age = rep(NA, length(unique(df_raw_S1$factor))), max_age = rep(NA, length(unique(df_raw_S1$factor))), diff = rep(NA, length(unique(df_raw_S1$factor))))
row = 1
for (fact in unique(df_raw_S1$factor)) {
x_i = df_raw_S1[df_raw_S1$factor == fact, ]
mixed_df_S1$factor[row] = fact
mixed_df_S1$min_age[row] = min(x_i$MeanAge, na.rm = TRUE)
mixed_df_S1$max_age[row] = max(x_i$MeanAge, na.rm = TRUE)
mixed_df_S1$diff[row] = max(x_i$MeanAge, na.rm = TRUE) - min(x_i$MeanAge, na.rm = TRUE)
row = row + 1
}
df_agg_meta_S1 <- dplyr::left_join(df_agg_meta_S1, mixed_df_S1)
df_agg_meta_S1$Age_bounds = paste0("[", round(df_agg_meta_S1$min_age, 1), " - ", round(df_agg_meta_S1$max_age, 1), "]")
# df$Outcome_precise = ifelse(is.na(df$Outcome_precise), "Generic", df$Outcome_precise)
# # df$factor = paste0(df$factor, "_", df$Outcome_precise)
df_raw$shared_controls <- NA
umb.main <- metaumbrella::umbrella(df_raw, mult.level = TRUE, method.var = "REML", r = 0.8, verbose = FALSE)
res.transit <- metaumbrella::add.evidence(umb.main,
criteria = "Personalized",
class_I = c(total_n = 500, p_value = 1e-3, I2 = 50,
egger_p = .05,
rob = 75, amstar = 4.99),
class_II = c(total_n = 350, p_value = 1e-3,
largest_CI = "notnull",
rob = 50, amstar = 3.99),
class_III = c(total_n = 200, p_value = 1e-3),
class_IV = c(p_value = 5e-2))
res <- metaumbrella::summary.umbrella(res.transit)
res <- gen_id(res$Factor, res)
# merge datasets
res$factor <- with(res, paste0(Author, "_", Year, "_", Intervention, "_", Outcome))
res.main <- dplyr::left_join(res, df_agg_meta)
# estimate the STANDARD ERROR of the pooled ES
ci_lo_transit <- ci_up_transit <- CI_up <- CI_lo <- NA
for (i in 1:nrow(res.main)) {
ci_lo_transit[i] <- gsub(",.*", "", res.main$value_CI[i])
ci_up_transit[i] <- gsub(".*, ", "", res.main$value_CI[i])
CI_lo[i] <- gsub("\\[", "", ci_lo_transit[i])
CI_up[i] <- gsub("]", "", ci_up_transit[i])
}
CI_lo <- as.numeric(as.character(CI_lo))
CI_up <- as.numeric(as.character(CI_up))
res.main$se <- (CI_up - CI_lo) / 3.92
# Create/recode some variables
res.main$total_n <- round(res.main$total_n)
res.main$Class <- ifelse(res.main$Class == "V", "ns", as.character(res.main$Class))
res.main$Sample_size_studies <- with(res.main, paste0(total_n, " (", n_studies, ")"))
res.main$Effect_size <- paste0("SMD = ", res.main$value, " [", CI_lo, ", ", CI_up, "]")
res.main$Risk_of_bias <- with(res.main, ifelse(rob < 50, "High",
ifelse(rob < 75, "Med.", ifelse(rob >= 75, "Low", NA_real_))))
res.main$Active_controls <- paste0(round(res.main$Active_controls), "%")
# Identify main characteristics (setting, outcome type, therapy implementer)
res.main = main_characteristics(res.main)
stop()
res.main$Intervention
res.main$Outcome
2287+3043
library(tidyverse)
mainsympt <- c("Overall ASD symptoms", "Social communication",
"Restricted repetitive behaviors", "Adaptive behaviors", "Cognition(IQ)",
"Language(Expressive)", "Language(Receptive)", "Disruptive behaviors")
max_rob = function(x) {
if (any(grepl("igh", x, fixed = TRUE))) { return("high risk") }
else if (any(grepl("nclear", x, fixed = TRUE))) { return("unclear") }
else if (any(grepl("ow", x, fixed = TRUE))) { return("low risk") }
else { return("ERROR!!!")  }
}
# load datasets ---
df.raw <- data.frame(readxl::read_excel(
"C:/Users/Corentin Gosling/drive_gmail/Recherche/Article 2 - Base de Données/1 - Extraction Psychosocial/4 - Data analysis/data_ebiact_psychosocial_MP.xlsx",
sheet = 1))
df.amstar.raw <- data.frame(readxl::read_excel(
"C:/Users/Corentin Gosling/drive_gmail/Recherche/Article 2 - Base de Données/1 - Extraction Psychosocial/5 - AMSTAR/ebiact_AMSTAR_MP.xlsx",
sheet = 1))[, 1:22]
# [, c("First_author_meta", "Year_meta", "amstar", "amstar_rank", "Link_MA")]; df.amstar.raw$Year_meta <- as.character(df.amstar.raw$Year_meta)
df.rob <- data.frame(readxl::read_excel("C:/Users/Corentin Gosling/drive_gmail/Recherche/Article 2 - Base de Données/1 - Extraction Psychosocial/6 - RoB/rob_data.xlsx", sheet = 1))[, 1:11]
df.amstar.raw$critical_bias = ifelse(
any(df.amstar.raw$Q2...Preregistered == 0 |
df.amstar.raw$Q4...Comp.search == 0 |
df.amstar.raw$Q7...Excluded.studies == 0 |
df.amstar.raw$Q9...Assess.RoB == 0 |
df.amstar.raw$Q11...Stats.MA == 0 |
df.amstar.raw$Q13...RoB.in.discussion == 0 |
df.amstar.raw$Q15...Publication.bias == 0), "crit", "ok")
df.amstar.raw$sum_critical_bias = NA
for (i in 1:nrow(df.amstar.raw)) {
df.amstar.raw$sum_critical_bias[i] = sum(
df.amstar.raw$Q2...Preregistered[i] == 0 | is.na(df.amstar.raw$Q2...Preregistered[i]),
df.amstar.raw$Q4...Comp.search[i] == 0 | is.na(df.amstar.raw$Q4...Comp.search[i]),
df.amstar.raw$Q7...Excluded.studies[i] == 0 | is.na(df.amstar.raw$Q7...Excluded.studies[i]),
df.amstar.raw$Q9...Assess.RoB[i] == 0 | is.na(df.amstar.raw$Q9...Assess.RoB[i]),
df.amstar.raw$Q11...Stats.MA[i] == 0 | is.na(df.amstar.raw$Q11...Stats.MA[i]),
df.amstar.raw$Q13...RoB.in.discussion[i] == 0 | is.na(df.amstar.raw$Q13...RoB.in.discussion[i]),
df.amstar.raw$Q15...Publication.bias[i] == 0 | is.na(df.amstar.raw$Q15...Publication.bias[i]))
}
df.amstar.raw$non_critical_bias = ifelse(
any(df.amstar.raw$Q1...PICO == 0 |
df.amstar.raw$Q3...Justification.design == 0 |
df.amstar.raw$Q5...Selection.dup == 0 |
df.amstar.raw$Q6...Extraction.dup == 0 |
df.amstar.raw$Q8...Details.included == 0 |
df.amstar.raw$Q10...Funding.CT == 0 |
df.amstar.raw$Q12...RoB.in.MA == 0 |
df.amstar.raw$Q14...Discussion.Heterogeneity == 0 |
df.amstar.raw$Q16...CoI.MA == 0), "non_crit", "ok")
df.amstar.raw$sum_non_critical_bias = NA
for (i in 1:nrow(df.amstar.raw)) {
df.amstar.raw$sum_non_critical_bias[i] = sum(
df.amstar.raw$Q1...PICO[i] == 0 | is.na(df.amstar.raw$Q1...PICO[i]),
df.amstar.raw$Q3...Justification.design[i] == 0 | is.na(df.amstar.raw$Q3...Justification.design[i]),
df.amstar.raw$Q5...Selection.dup[i] == 0 | is.na(df.amstar.raw$Q5...Selection.dup[i]),
df.amstar.raw$Q6...Extraction.dup[i] == 0 | is.na(df.amstar.raw$Q6...Extraction.dup[i]),
df.amstar.raw$Q8...Details.included[i] == 0 | is.na(df.amstar.raw$Q8...Details.included[i]),
df.amstar.raw$Q10...Funding.CT[i] == 0 | is.na(df.amstar.raw$Q10...Funding.CT[i]),
df.amstar.raw$Q12...RoB.in.MA[i] == 0 | is.na(df.amstar.raw$Q12...RoB.in.MA[i]),
df.amstar.raw$Q14...Discussion.Heterogeneity[i] == 0 | is.na(df.amstar.raw$Q14...Discussion.Heterogeneity[i]),
df.amstar.raw$Q16...CoI.MA[i] == 0 | is.na(df.amstar.raw$Q16...CoI.MA[i]))
}
df.amstar.raw$amstar_rank = with(df.amstar.raw,
ifelse(sum_critical_bias == 0 & sum_non_critical_bias <= 1, "High",
ifelse(sum_critical_bias == 0 & sum_non_critical_bias <= 4, "Moderate",
ifelse(sum_critical_bias == 0 & sum_non_critical_bias > 4, "Low",
ifelse(sum_critical_bias == 1, "Low",
ifelse(sum_critical_bias > 1, "Critically low", "N/A"))))))
df.amstar.raw$amstar_rank <- ifelse(is.na(df.amstar.raw$Q1...PICO), "not retained in main analyses", df.amstar.raw$amstar_rank)
View(with(df.amstar.raw, cbind(final_selection, First_author_meta, Year_meta, sum_critical_bias, sum_non_critical_bias, amstar_rank)))
df.amstar.rank <- df.amstar.raw[, c("First_author_meta", "Year_meta","amstar", "amstar_rank", "Link_MA")]
# df.amstar <- df.amstar.raw[!duplicated(df.amstar.raw), ]
# df.amstar.rank <- df.amstar.raw[!duplicated(df.amstar.rank), ]
df.raw$factor = paste0(df.raw$First_author_meta, "_", df.raw$Year_meta, "_", df.raw$Intervention_precise, "_", df.raw$Outcome_general)
# Indicate the interventions for each CCT
df.inter.CCT <- df.raw
df.inter.CCT$IDENT <- paste0(df.inter.CCT$author, "_", df.inter.CCT$year, "_",
df.inter.CCT$Intervention_general)
df.inter.CCT$author_year <- paste0(df.inter.CCT$author, " (", df.inter.CCT$year, ")")
df.inter.CCT.uniq <- df.inter.CCT[!duplicated(df.inter.CCT$IDENT),]
df.inter.CCT.uniq <- df.inter.CCT.uniq[, c("author_year", "Intervention_general",
"Intervention_precise")]
df.inter.CCT.uniq <- df.inter.CCT.uniq %>%
group_by(author_year) %>%
summarize(Intervention_all = paste(Intervention_general, collapse = ' / '),
Intervention_precise_all = paste(Intervention_precise, collapse = ' / '))
# merge the datasets
## raw <= amstar
df.raw.am <- dplyr::left_join(df.raw, df.amstar.rank)
## raw + amstar <= intervention description
df.raw.am$author_year <- with(df.raw.am, paste0(author, " (", year, ")"))
df.raw.am.rob <- dplyr::left_join(df.raw.am, df.inter.CCT.uniq)
## raw + amstar + intervention <=  rob
df <- dplyr::left_join(df.raw.am.rob, df.rob)
# RoB
df$RoB_SeqGen = with(df, ifelse(First_author_meta %in% c("Sandbank", "Crank", "Ona"),
RandomSeq, r1_seq_gen))
df$RoB_Conceal = with(df, ifelse(First_author_meta %in% c("Sandbank", "Crank", "Ona"),
AllocConc, r2_alloc_conceal))
df$RoB_BlindPers = with(df, ifelse(First_author_meta %in% c("Sandbank", "Crank", "Ona"),
BlindingPers, r3_blind_pers))
df$RoB_BlindOut = with(df, ifelse(First_author_meta %in% c("Sandbank", "Crank", "Ona"),
BlindingOut, r4_blind_out))
df$RoB_Attrition = with(df, ifelse(First_author_meta %in% c("Sandbank", "Crank", "Ona"),
Attrition, r5_attrition))
df$RoB_Reporting = with(df, ifelse(First_author_meta %in% c("Sandbank", "Crank", "Ona"),
SelectReport, r6_report))
df$author_year_rob <- paste0(df$author, " (", gsub("b", "", df$year), ")")
for (id in df$author_year_rob) {
x = df[df$author_year_rob == id, ]
if (any(is.na(x$RoB_SeqGen))) {
if (any(!is.na(x$RoB_SeqGen))) {
df_order = x[order(x$amstar, decreasing = TRUE), ]
df_order = df_order[!is.na(df_order$RoB_SeqGen), ]
df_sub = df_order[df_order$First_author_meta == unique(df_order$First_author_meta)[1], ]
df$RoB_SeqGen[df$row_id %in% x[which(is.na(x$RoB_SeqGen)), ]$row_id] <- max_rob(df_sub$RoB_SeqGen)
}
}
if (any(is.na(x$RoB_Conceal))) {
if (any(!is.na(x$RoB_Conceal))) {
df_order = x[order(x$amstar, decreasing = TRUE), ]
df_order = df_order[!is.na(df_order$RoB_Conceal), ]
df_sub = df_order[df_order$First_author_meta == unique(df_order$First_author_meta)[1], ]
df$RoB_Conceal[df$row_id %in% x[which(is.na(x$RoB_Conceal)), ]$row_id] <- max_rob(df_sub$RoB_Conceal)
}
}
if (any(is.na(x$RoB_BlindPers))) {
if (any(!is.na(x$RoB_BlindPers))) {
df_order = x[order(x$amstar, decreasing = TRUE), ]
df_order = df_order[!is.na(df_order$RoB_BlindPers), ]
df_sub = df_order[df_order$First_author_meta == unique(df_order$First_author_meta)[1], ]
df$RoB_BlindPers[df$row_id %in% x[which(is.na(x$RoB_BlindPers)), ]$row_id] <- max_rob(df_sub$RoB_BlindPers)
}
}
if (any(is.na(x$RoB_BlindOut))) {
if (any(!is.na(x$RoB_BlindOut))) {
df_order = x[order(x$amstar, decreasing = TRUE), ]
df_order = df_order[!is.na(df_order$RoB_BlindOut), ]
df_sub = df_order[df_order$First_author_meta == unique(df_order$First_author_meta)[1], ]
df$RoB_BlindOut[df$row_id %in% x[which(is.na(x$RoB_BlindOut)), ]$row_id] <- max_rob(df_sub$RoB_BlindOut)
}
}
if (any(is.na(x$RoB_Attrition))) {
if (any(!is.na(x$RoB_Attrition))) {
df_order = x[order(x$amstar, decreasing = TRUE), ]
df_order = df_order[!is.na(df_order$RoB_Attrition), ]
df_sub = df_order[df_order$First_author_meta == unique(df_order$First_author_meta)[1], ]
df$RoB_Attrition[df$row_id %in% x[which(is.na(x$RoB_Attrition)), ]$row_id] <- max_rob(df_sub$RoB_Attrition)
}
}
if (any(is.na(x$RoB_Reporting))) {
if (any(!is.na(x$RoB_Reporting))) {
df_order = x[order(x$amstar, decreasing = TRUE), ]
df_order = df_order[!is.na(df_order$RoB_Reporting), ]
df_sub = df_order[df_order$First_author_meta == unique(df_order$First_author_meta)[1], ]
df$RoB_Reporting[df$row_id %in% x[which(is.na(x$RoB_Reporting)), ]$row_id] <- max_rob(df_sub$RoB_Reporting)
}
}
}
df[which(df$author == "Rickards" & df$Outcome_general == "Cognition(IQ)"), ]$RoB_BlindOut <- "low risk"
df[, c("RoB_SeqGen", "RoB_Conceal", "RoB_BlindPers",
"RoB_BlindOut", "RoB_Attrition", "RoB_Reporting")][df[, c("RoB_SeqGen", "RoB_Conceal", "RoB_BlindPers",
"RoB_BlindOut", "RoB_Attrition", "RoB_Reporting")] == "High"] <- "high risk"
df[, c("RoB_SeqGen", "RoB_Conceal", "RoB_BlindPers",
"RoB_BlindOut", "RoB_Attrition", "RoB_Reporting")][df[, c("RoB_SeqGen", "RoB_Conceal", "RoB_BlindPers",
"RoB_BlindOut", "RoB_Attrition", "RoB_Reporting")] == "Low"] <- "low risk"
df[, c("RoB_SeqGen", "RoB_Conceal", "RoB_BlindPers",
"RoB_BlindOut", "RoB_Attrition", "RoB_Reporting")][df[, c("RoB_SeqGen", "RoB_Conceal", "RoB_BlindPers",
"RoB_BlindOut", "RoB_Attrition", "RoB_Reporting")] == "Unclear"] <- "unclear"
# do.call(rbind, apply(df[, c("RoB_SeqGen", "RoB_Conceal", "RoB_BlindPers",
#                            "RoB_BlindOut", "RoB_Attrition", "RoB_Reporting")], 2, unique))
df$RoB_BlindOut[is.na(df$RoB_BlindOut)] <- "high risk (assumed)"
df$RoB_BlindOut_num <- ifelse(grepl("low", df$RoB_BlindOut, fixed = TRUE) , 100, 0)
df$rob <- ifelse(grepl("low", df$RoB_BlindOut, fixed = TRUE) & df$Design == "RCT", "low", "high")
df$low_RoB_num <- ifelse(df$rob == "low", 100, 0)
df$Design_num <- ifelse(df$Design == "RCT", 100, 0)
# replace (imp) by empty in imputed columns
df$MeanAgeRaw <- df$MeanAge
df$MeanIQRaw <- df$MeanIQ
cols.imp <- c("MeanAge", "MeanIQ")
df[cols.imp] <- sapply(as.data.frame(df[cols.imp]), function (x) gsub("(imp)", "", x, fixed = TRUE))
# replace commas by points in raw dataset
cols.num <- c("n_cases", "n_controls", "MeanAge", "MinAge", "MaxAge", "MeanIQ", "MinIQ", "MaxIQ", "LengthWeek", "DurationMonth", "PercMale", "amstar", "mean_cases", "mean_controls", "sd_cases", "sd_controls", "value", "ci_lo", "ci_up", "var", "se")
df[cols.num] <- sapply(as.data.frame(df[cols.num]), function (x) gsub(",", ".", x, fixed = TRUE))
df[cols.num] <- sapply(as.data.frame(df[cols.num]), function (x) as.numeric(as.character(x)))
df$Outcome_test <- ifelse(df$Outcome_type == "Test", 100,
ifelse(is.na(df$Outcome_type), NA_real_, 0))
df$Outcome_questionnaire <- ifelse(grepl("Report", df$Outcome_type), 100, ifelse(is.na(df$Outcome_type), NA_real_, 0))
df$Outcome_observation <- ifelse(grepl("Observation", df$Outcome_type), 100, ifelse(is.na(df$Outcome_type), NA_real_, 0))
df$parent_imp <- ifelse(grepl("Caregiver", df$TherapImp), 100,
ifelse(is.na(df$TherapImp), NA_real_, 0))
df$prof_imp <- ifelse(grepl("Prof", df$TherapImp), 100,
ifelse(is.na(df$TherapImp), NA_real_, 0))
df$tech_imp <- ifelse(grepl("Comput|iPad|DVD|Robot|Virtual", df$TherapImp), 100,
ifelse(is.na(df$TherapImp), NA_real_, 0))
df$sett_home <- ifelse(grepl("Home", df$Setting), 100,
ifelse(is.na(df$Setting), NA_real_, 0))
df$sett_clin <- ifelse(grepl("Clinic", df$Setting), 100,
ifelse(is.na(df$Setting), NA_real_, 0))
df$sett_class <- ifelse(grepl("School", df$Setting), 100,
ifelse(is.na(df$Setting), NA_real_, 0))
df$Active_controls <- ifelse(grepl("COMP", df$Type_comp), 100, ifelse(is.na(df$Type_comp), NA_real_, 0))
df$N_tot <- apply(df[, c('n_cases', 'n_controls')], 1, sum)
# Obtain sample size (sum for independent groups, maximum N for multiple outcomes)
df$id_row <- 1:nrow(df)
df[which(df$multiple_es == "groups"), ]$id_row <- 9999
setwd("C:/Users/Corentin Gosling/drive_gmail/Recherche/Article 2 - Base de Données/1 - Extraction Psychosocial/4 - Data analysis/supplementary/")
saveRDS(df, file = "df.rds")
saveRDS(df.amstar.rank, file = "df_amstar.rds")
df_v = subset(df, !First_author_meta %in% c("Sandbank", "Crank", "Ona"))
if(length(unique(paste(df$First_author_meta, df$Year_meta))[!unique(paste(df$First_author_meta, df$Year_meta)) %in% unique(paste(df.amstar.rank$First_author_meta, df.amstar.rank$Year_meta))] != 0)) stop(STOP)
if(length(unique(paste(df_v$author, df_v$year))[!unique(paste(df_v$author, df_v$year)) %in% unique(paste(df.rob$author, df.rob$year))] != 0)) stop(STOP)
if(length(unique(paste(df_v$First_author_meta, df_v$Year_meta))[!unique(paste(df_v$First_author_meta, df_v$Year_meta)) %in% unique(paste(df.rob$First_author_meta, df.rob$Year_meta))] != 0)) stop(STOP)
# several design values
df_agg = aggregate.data.frame(df[, c("author", "year", "Design")], by = list(grp1 = paste(df$author, df$year)), FUN = function(x) length(unique(x)))
df_agg$grp1[which(df_agg$Design > 1)]
# verify rob values
df_no_rob = df[which(df$RoB_BlindOut == "high risk (assumed)"), ]
df.rob.com = subset(df.rob, !is.na(df.rob$r4_blind_out))
if(length(paste(df_no_rob$author, df_no_rob$year)[which(paste(df_no_rob$author, df_no_rob$year) %in% paste(df.rob.com$author, df.rob.com$year))] != 0)) stop(STOP)
df_sandbank = read.csv("C:/Users/Corentin Gosling/drive_gmail/Recherche/Article 2 - Base de Données/1 - Extraction Psychosocial/7 - Comparisons/Final_AIMforOSF (2).csv")
df_sandbank$author = gsub( " .*$", "", df_sandbank$Reference)
df_sandbank$author = gsub( ",", "", df_sandbank$author)
df_sandbank$year = gsub( ",", "", df_sandbank$Year)
df_sandbank_detect = subset(df_sandbank, !is.na(df_sandbank$Detection.Bias))
if(length(paste(df_no_rob$author, df_no_rob$year)[
which(paste(df_no_rob$author, df_no_rob$year) %in% paste(df_sandbank_detect$author, df_sandbank_detect$year))] != 0)) stop(STOP)
sort(unique(paste0(df_no_rob$author, df_no_rob$year)))#
# View(df[, c("First_author_meta", "Year_meta", "author", "year",
#        "RoB_SeqGen", "RoB_Conceal", "RoB_BlindPers",
#        "RoB_BlindOut", "RoB_Attrition", "RoB_Reporting")])
View(df.amstar.rank)
